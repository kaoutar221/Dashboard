import os
import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import shap

# Configuration de la page
st.set_page_config(
    page_title="Dashboard Interactif de Pr√©diction de Risque de Cr√©dit",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Charger le pipeline complet
model_path = 'model/best_model_fbeta_gb.pkl'
pipeline = joblib.load(model_path)

# Charger les noms des caract√©ristiques
feature_names_path = 'model/feature_names.txt'
with open(feature_names_path, 'r') as f:
    feature_names = [line.strip() for line in f]

# Charger les donn√©es
data_path = 'data/sampled_df1 (1).csv'  # Assurez-vous que le fichier est dans le m√™me r√©pertoire que ce script
df = pd.read_csv(data_path)

# Assurer que les identifiants clients sont des entiers
df['SK_ID_CURR'] = df['SK_ID_CURR'].astype(int)

# Limiter aux 50 premiers identifiants clients
unique_client_ids = df['SK_ID_CURR'].unique()
limited_client_ids = unique_client_ids[:50]  # S√©lectionner les 50 premiers identifiants

# D√©finir les couleurs avec un contraste √©lev√©
colors = {
    'all_clients': '#1f77b4',  # Bleu √† contraste √©lev√©
    'accepted_clients': '#2ca02c',  # Vert √† contraste √©lev√©
    'rejected_clients': '#d62728'  # Rouge √† contraste √©lev√©
}

# D√©finir les d√©finitions des caract√©ristiques
feature_definitions = {
    "EXT_SOURCE_3": "Score externe source 3",
    "EXT_SOURCE_2": "Score externe source 2",
    "EXT_SOURCE_1": "Score externe source 1",
    "CC_CNT_DRAWINGS_ATM_CURRENT_MEAN": "Nombre moyen de retraits au guichet automatique",
    "CC_CNT_DRAWINGS_CURRENT_MAX": "Nombre maximum de retraits actuels",
    "BURO_DAYS_CREDIT_MEAN": "Nombre moyen de jours de cr√©dit",
    "CC_AMT_BALANCE_MEAN": "Solde moyen des comptes de carte de cr√©dit",
    "CC_AMT_TOTAL_RECEIVABLE_MEAN": "Montant total moyen recevable",
    "DAYS_BIRTH": "Nombre de jours depuis la naissance",
    "PREV_NAME_CONTRACT_STATUS_Refused_MEAN": "Moyenne des contrats refus√©s pr√©c√©demment",
    "BURO_CREDIT_ACTIVE_Active_MEAN": "Moyenne des cr√©dits actifs",
    "PREV_CODE_REJECT_REASON_XAP_MEAN": "Moyenne des raisons de rejet XAP pr√©c√©dentes",
    "BURO_DAYS_CREDIT_MIN": "Nombre minimum de jours de cr√©dit",
    "BURO_DAYS_CREDIT_UPDATE_MEAN": "Nombre moyen de jours depuis la mise √† jour du cr√©dit",
    "DAYS_EMPLOYED_PERC": "Pourcentage de jours employ√©s",
    "PREV_NAME_CONTRACT_STATUS_Approved_MEAN": "Moyenne des contrats approuv√©s pr√©c√©demment",
    "CLOSED_DAYS_CREDIT_MIN": "Nombre minimum de jours de cr√©dit ferm√©",
    "ACTIVE_DAYS_CREDIT_MEAN": "Nombre moyen de jours de cr√©dit actif",
    "TARGET": "Cible (0 = rembours√©, 1 = d√©faut)",
    "SK_ID_CURR": "Identifiant client"
}

# Titre de l'application
st.title("Dashboard Interactif de Pr√©diction de Risque de Cr√©dit")

# Afficher le tableau des caract√©ristiques et d√©finitions sur la page d'accueil
st.subheader("Tableau des Caract√©ristiques et D√©finitions")
features_df = pd.DataFrame(list(feature_definitions.items()), columns=["Caract√©ristique", "D√©finition"])
st.dataframe(features_df, width=800, height=400)

# Utiliser la barre lat√©rale pour la recherche d'identifiant client
st.sidebar.header("Recherche d'Identifiant Client")
client_id = st.sidebar.selectbox(
    "S√©lectionnez l'identifiant du client:",
    ["S√©lectionner un client"] + list(map(str, limited_client_ids))
)

# Ajouter des boutons pour afficher les informations suppl√©mentaires
st.sidebar.header("Navigation")
option = st.sidebar.radio("Choisissez une option:", ["Informations Personnelles", "Importance des Caract√©ristiques",
                                                     "Distributions des Caract√©ristiques", "Analyse Bi-Vari√©e",
                                                     "Autres Analyses"])

threshold = 0.45  # Fixer le seuil √† 0.45

# Afficher les r√©sultats dans la page principale
if client_id and client_id != "S√©lectionner un client":
    client_id = int(client_id)
    if client_id not in df['SK_ID_CURR'].values:
        st.error("Client ID n'est pas dans le dataset")
    else:
        # S√©lectionner les donn√©es du client
        client_data = df[df['SK_ID_CURR'] == client_id][feature_names]

        # Pr√©dire la probabilit√© de d√©faut en utilisant le pipeline complet
        probability = pipeline.predict_proba(client_data)[:, 1][0]
        prediction = 'accept√©' if probability < threshold else 'refus√©'

        # Afficher le r√©sultat dans une case color√©e
        if prediction == 'accept√©':
            st.markdown(
                f'<div style="padding: 10px; background-color: lightgreen; color: black; text-align: center; border-radius: 5px;">'
                f'<strong>Client {client_id} est accept√©</strong></div>',
                unsafe_allow_html=True
            )
        else:
            st.markdown(
                f'<div style="padding: 10px; background-color: lightcoral; color: black; text-align: center; border-radius: 5px;">'
                f'<strong>Client {client_id} est refus√©</strong></div>',
                unsafe_allow_html=True
            )

        if option == "Informations Personnelles":
            # Afficher les informations descriptives du client
            st.subheader("Informations Descriptives du Client")

            selected_features = st.multiselect(
                "S√©lectionnez les caract√©ristiques √† afficher:", feature_names, default=feature_names[:5])

            st.write(client_data[selected_features].T)

            # Ajout de l'interpr√©tation du score
            st.subheader("Score de Pr√©diction")

            # Afficher le graphique compteur interactif
            fig = go.Figure(go.Indicator(
                mode="gauge+number",
                value=probability,
                title={'text': "Score de Pr√©diction"},
                gauge={
                    'axis': {'range': [0, 1]},
                    'bar': {'color': "darkblue"},
                    'steps': [
                        {'range': [0, threshold], 'color': "lightgreen"},
                        {'range': [threshold, 1], 'color': "lightcoral"}],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': threshold}}))

            st.plotly_chart(fig, use_container_width=True)
            st.caption(
                "Graphique interactif du score de pr√©diction. Le graphique montre une jauge avec le score de pr√©diction du client.")

            # Interpr√©tation pour une personne non experte
            if probability < threshold:
                st.write(
                    f"Le mod√®le estime que le risque de d√©faut de paiement est faible (Probabilit√© de d√©faut: {probability:.2f}).")
            else:
                st.write(
                    f"Le mod√®le estime que le risque de d√©faut de paiement est √©lev√© (Probabilit√© de d√©faut: {probability:.2f}).")

            # Indication sur la distance par rapport au seuil
            if abs(probability - threshold) < 0.1:
                st.write(
                    "La probabilit√© de d√©faut est proche du seuil. Cela signifie que le client est dans une zone grise et n√©cessite peut-√™tre une analyse plus approfondie.")
            else:
                st.write(
                    "La probabilit√© de d√©faut est nettement √©loign√©e du seuil, indiquant une d√©cision plus claire.")

            # Explication sur les risques de cr√©dit
            st.write("""
            **Qu'est-ce que le risque de cr√©dit ?**

            Le risque de cr√©dit est la probabilit√© que l'emprunteur ne puisse pas rembourser un pr√™t. Cela peut √™tre influenc√© par plusieurs facteurs,
            tels que les ant√©c√©dents de cr√©dit, le revenu, l'emploi, les dettes actuelles et d'autres crit√®res financiers. Un risque de cr√©dit √©lev√© signifie qu'il est plus probable que le client ne rembourse pas le pr√™t, 
            ce qui peut entra√Æner des pertes financi√®res pour le pr√™teur. D'o√π l'importance de pr√©dire et de g√©rer ces risques pour les institutions financi√®res.
            """)

        elif option == "Importance des Caract√©ristiques":
            st.subheader("Importance des Caract√©ristiques Globales")

            # Explication simple de l'importance des caract√©ristiques
            st.write("""
            **Qu'est-ce que l'importance des caract√©ristiques ?**

            L'importance des caract√©ristiques est une mesure qui montre quelles caract√©ristiques (ou variables) ont le plus d'impact sur les d√©cisions du mod√®le de pr√©diction. 
            Plus une caract√©ristique est importante, plus elle influence le r√©sultat de la pr√©diction. Par exemple, si le mod√®le d√©cide d'approuver ou de refuser un cr√©dit, les caract√©ristiques importantes sont celles qui ont le plus contribu√© √† cette d√©cision.
            """)

            # Permettre √† l'utilisateur de choisir le nombre de caract√©ristiques √† afficher
            num_features = st.slider("Nombre de caract√©ristiques √† afficher:", 1, len(feature_names), 10)

            # Calculer l'importance des caract√©ristiques
            try:
                importances = pipeline.named_steps['classifier'].feature_importances_
                indices = np.argsort(importances)[::-1][:num_features]
                selected_features = [feature_names[i] for i in indices]
                selected_importances = importances[indices]

                # Afficher un graphique en barres de l'importance des caract√©ristiques
                fig = go.Figure([go.Bar(x=selected_features, y=selected_importances)])
                fig.update_layout(title="Importance des Caract√©ristiques Globales",
                                  xaxis_title="Caract√©ristiques",
                                  yaxis_title="Importance",
                                  yaxis=dict(range=[0, max(selected_importances) * 1.1]))

                st.plotly_chart(fig)
                st.caption(
                    "Graphique montrant les caract√©ristiques les plus importantes pour le mod√®le. Les barres repr√©sentent l'importance relative de chaque caract√©ristique.")

            except AttributeError:
                st.error("Le mod√®le s√©lectionn√© ne supporte pas l'attribut 'feature_importances_'.")

            st.subheader("Importance des Caract√©ristiques Locales pour le Client S√©lectionn√©")

            # Permettre √† l'utilisateur de choisir le nombre de caract√©ristiques locales √† afficher
            num_local_features = st.slider("Nombre de caract√©ristiques locales √† afficher:", 1, len(feature_names), 10)

            # Calculer les valeurs SHAP pour le client s√©lectionn√©
            explainer = shap.Explainer(pipeline.named_steps['classifier'], df[feature_names])
            shap_values = explainer(client_data[feature_names])

            # Afficher le graphique de l'importance des caract√©ristiques locales
            st.write(
                "Les valeurs SHAP montrent l'impact de chaque caract√©ristique sur la pr√©diction du mod√®le pour le client s√©lectionn√©.")

            # Plot SHAP waterfall plot for the individual
            fig, ax = plt.subplots(figsize=(10, 5))
            shap.waterfall_plot(shap_values[0], max_display=num_local_features, show=False)
            st.pyplot(fig)
            st.caption(
                "Graphique montrant l'importance des caract√©ristiques locales pour le client s√©lectionn√©. Les valeurs SHAP indiquent comment chaque caract√©ristique influence la pr√©diction du mod√®le.")

            # Ajouter une interpr√©tation des r√©sultats locaux
            st.write("""
            **Interpr√©tation des caract√©ristiques locales :**

            Le graphique ci-dessus montre l'impact de chaque caract√©ristique sur la pr√©diction pour le client s√©lectionn√©. 
            Les caract√©ristiques en haut du graphique ont le plus grand impact, positif ou n√©gatif, sur le r√©sultat final.

            - **Caract√©ristiques positives (rouge)** : Ces caract√©ristiques augmentent la probabilit√© de d√©faut du client.
            - **Caract√©ristiques n√©gatives (bleu)** : Ces caract√©ristiques r√©duisent la probabilit√© de d√©faut du client.

            Par exemple, si le revenu du client est beaucoup plus bas que la moyenne, cela pourrait augmenter son risque de d√©faut, et donc appara√Ætre comme une caract√©ristique rouge.
            √Ä l'inverse, une longue dur√©e d'emploi stable pourrait r√©duire le risque de d√©faut, apparaissant comme une caract√©ristique bleue.
            """)

        elif option == "Distributions des Caract√©ristiques":
            st.subheader("Comparaison des Informations Descriptives")

            # Pr√©dire les probabilit√©s pour tous les clients
            df['probability'] = pipeline.predict_proba(df[feature_names])[:, 1]
            df['prediction'] = df['probability'].apply(lambda x: 'accept√©' if x < threshold else 'refus√©')

            # S√©lectionner des variables pour comparaison
            selected_features = st.multiselect("S√©lectionnez des variables pour comparaison:", feature_names,
                                               default=feature_names[:2])

            for selected_feature in selected_features:
                # Ajout des descriptions pour les graphiques
                fig, ax = plt.subplots()

                df_accepted = df[df['prediction'] == 'accept√©']
                df_rejected = df[df['prediction'] == 'refus√©']

                bins = np.histogram(np.hstack((df_accepted[selected_feature], df_rejected[selected_feature])), bins=30)[
                    1]  # obtenir des bacs coh√©rents

                ax.hist(df_accepted[selected_feature], bins=bins, alpha=0.7, color=colors['accepted_clients'],
                        label='Clients accept√©s')
                ax.hist(df_rejected[selected_feature], bins=bins, alpha=0.7, color=colors['rejected_clients'],
                        label='Clients refus√©s')
                ax.axvline(client_data[selected_feature].values[0], color='black', linestyle='dashed', linewidth=2,
                           label='Client s√©lectionn√©')
                ax.set_title(f"Distribution de {selected_feature}")
                ax.legend()
                ax.set_xlabel(selected_feature)
                ax.set_ylabel('Nombre de clients')

                # Ajouter les statistiques descriptives
                mean_val = df[selected_feature].mean()
                median_val = df[selected_feature].median()
                std_val = df[selected_feature].std()

                st.write(f"Moyenne de {selected_feature} pour tous les clients : {mean_val:.2f}")
                st.write(f"M√©diane de {selected_feature} pour tous les clients : {median_val:.2f}")
                st.write(f"√âcart-type de {selected_feature} pour tous les clients : {std_val:.2f}")

                # Ajouter une interpr√©tation simple du graphique
                st.write(f"**Interpr√©tation du graphique :**")
                st.write(
                    f"Le graphique ci-dessus montre la distribution de la variable '{selected_feature}' pour les clients accept√©s (en vert) et refus√©s (en rouge), compar√©e √† celle du client s√©lectionn√© (ligne noire pointill√©e).")
                st.write(
                    f"Si la ligne noire est proche de la moyenne (ligne centrale de la barre), cela signifie que la valeur de cette caract√©ristique pour le client est proche de celle de la majorit√© des autres clients.")
                st.write(
                    f"Des √©carts significatifs peuvent indiquer des diff√©rences notables par rapport √† la moyenne des clients, ce qui peut aider √† identifier des particularit√©s ou des risques potentiels.")

                st.pyplot(fig)
                st.caption(
                    "Graphique montrant la distribution de la variable s√©lectionn√©e pour les clients accept√©s et refus√©s, ainsi que la position du client s√©lectionn√©.")

        elif option == "Analyse Bi-Vari√©e":
            st.subheader("Analyse Bi-Vari√©e")

            # S√©lectionner deux variables pour l'analyse bi-vari√©e
            feature_x = st.selectbox("S√©lectionnez la premi√®re variable (axe X):", feature_names)
            feature_y = st.selectbox("S√©lectionnez la deuxi√®me variable (axe Y):", feature_names, index=1)

            # Calculer les scores de pr√©diction pour toutes les donn√©es
            scores = pipeline.predict_proba(df[feature_names])[:, 1]

            # Cr√©er le graphique bi-vari√©
            fig = px.scatter(
                df, x=feature_x, y=feature_y, color=scores, color_continuous_scale='Viridis',
                labels={'color': 'Score de Pr√©diction'},
                title=f"Analyse Bi-Vari√©e entre {feature_x} et {feature_y}"
            )

            # Ajouter la position du client s√©lectionn√©
            fig.add_trace(go.Scatter(
                x=[client_data[feature_x].values[0]], y=[client_data[feature_y].values[0]],
                mode='markers',
                marker=dict(color='red', size=12, symbol='x'),
                name='Client S√©lectionn√©'
            ))

            st.plotly_chart(fig)
            st.caption(
                "Graphique montrant l'analyse bi-vari√©e entre les deux caract√©ristiques s√©lectionn√©es avec un d√©grad√© de couleur selon le score des clients et le positionnement du client s√©lectionn√©.")

            # Explications pour les personnes non expertes en data science
            st.write("""
            **Qu'est-ce que l'analyse bi-vari√©e ?**

            L'analyse bi-vari√©e consiste √† examiner la relation entre deux variables. Dans ce contexte, nous cherchons √† voir comment deux caract√©ristiques (comme l'√¢ge et le revenu) 
            sont li√©es entre elles et comment elles influencent le score de pr√©diction de risque de cr√©dit.

            **Comment interpr√©ter ce graphique ?**

            - Les points sur le graphique repr√©sentent des clients.
            - La couleur des points montre le score de pr√©diction du risque de cr√©dit, avec une √©chelle de couleurs allant du vert (risque faible) au rouge (risque √©lev√©).
            - Le point rouge avec un "x" montre la position du client s√©lectionn√© sur ces deux caract√©ristiques.

            **Exemple :**
            Si vous choisissez l'√¢ge (en jours depuis la naissance) sur l'axe X et le revenu sur l'axe Y :
            - Vous pourriez voir que les clients plus √¢g√©s avec un revenu plus √©lev√© ont g√©n√©ralement un risque de cr√©dit plus faible (points verts).
            - √Ä l'inverse, les clients plus jeunes avec un revenu plus bas pourraient avoir un risque de cr√©dit plus √©lev√© (points rouges).

            Cette analyse peut aider √† comprendre quels facteurs contribuent au risque de cr√©dit et comment ils interagissent entre eux.
            """)

        elif option == "Autres Analyses":
            st.subheader("Autres Analyses des Clients")

            # Distribution des scores de pr√©diction pour tous les clients
            st.subheader("Distribution des Scores de Pr√©diction")
            scores = pipeline.predict_proba(df[feature_names])[:, 1]
            fig, ax = plt.subplots()
            ax.hist(scores, bins=30, alpha=0.7, color='blue')
            ax.axvline(probability, color='red', linestyle='dashed', linewidth=2, label='Client s√©lectionn√©')
            ax.set_title('Distribution des Scores de Pr√©diction')
            ax.set_xlabel('Score de Pr√©diction')
            ax.set_ylabel('Nombre de Clients')
            ax.legend()
            st.pyplot(fig)
            st.caption(
                "Histogramme montrant la distribution des scores de pr√©diction pour tous les clients avec une ligne indiquant le score du client s√©lectionn√©.")

            # Explication simple de l'importance des caract√©ristiques
            st.write("""
            **Qu'est-ce que l'importance des caract√©ristiques ?**

            L'importance des caract√©ristiques indique quelles variables ont le plus d'impact sur la d√©cision du mod√®le de pr√©diction. 
            Cela peut aider √† comprendre quelles caract√©ristiques sont les plus influentes pour pr√©dire le risque de cr√©dit.

            **Pourquoi est-ce important ?**

            Conna√Ætre les caract√©ristiques importantes peut aider √† orienter les d√©cisions de cr√©dit et √† cibler les facteurs de risque les plus critiques. 
            Cela peut √©galement fournir des informations utiles pour am√©liorer les mod√®les de pr√©diction ou pour des strat√©gies de gestion du risque de cr√©dit.
            """)
